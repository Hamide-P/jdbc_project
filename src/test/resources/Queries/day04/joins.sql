SELECT * FROM CUSTOMER;

SELECT * FROM ADDRESS;

SELECT FIRST_NAME,LAST_NAME,ADDRESS,PHONE
FROM CUSTOMER JOIN ADDRESS
ON CUSTOMER.ADDRESS_ID = ADDRESS.ADDRESS_ID;

--Q What if I want to see customer table address_id information too.
SELECT FIRST_NAME,LAST_NAME, CUSTOMER.ADDRESS_ID, ADDRESS.ADDRESS_ID, ADDRESS,PHONE
FROM CUSTOMER JOIN ADDRESS
ON CUSTOMER.ADDRESS_ID = ADDRESS.ADDRESS_ID;

--Table Aliases
--CUSTOMER --C
--EMPLOYEES --E
--ADDRESS --A
-- We give abbreviation to the table names inorder to call shortly
-- we can assume there is a hidden 'AS'
SELECT FIRST_NAME,LAST_NAME,C.ADDRESS_ID,A.ADDRESS_ID,ADDRESS,PHONE
FROM CUSTOMER C JOIN ADDRESS A
ON C.ADDRESS_ID = A.ADDRESS_ID;

--INNER JOIN and JOIN is the same logic
SELECT FIRST_NAME,LAST_NAME,C.ADDRESS_ID,A.ADDRESS_ID,ADDRESS,PHONE
FROM CUSTOMER C INNER JOIN ADDRESS A
ON C.ADDRESS_ID = A.ADDRESS_ID;

/*
    LEFT OUTER JOIN / LEFT JOIN
    --it will give matching part between two tables + unique for LEFT table
    --the order of the table is important
 */

SELECT FIRST_NAME,LAST_NAME,C.ADDRESS_ID,A.ADDRESS_ID,ADDRESS,PHONE
FROM CUSTOMER C LEFT OUTER JOIN ADDRESS A
ON C.ADDRESS_ID = A.ADDRESS_ID;

/*
    RIGHT OUTER JOIN / RIGHT JOIN
    --it will give matching part + unique for RIGHT table
    --the order of table is important
 */

SELECT FIRST_NAME,LAST_NAME,C.ADDRESS_ID,A.ADDRESS_ID,ADDRESS,PHONE
FROM CUSTOMER C RIGHT OUTER JOIN ADDRESS A
ON C.ADDRESS_ID = A.ADDRESS_ID;

--FULL OUTER JOIN
/*
returns all the rows from both tables involved in the join, matching rows from both
tables where possible, and filling in NULL values for non-matching rows.
*/
SELECT FIRST_NAME,LAST_NAME,C.ADDRESS_ID,A.ADDRESS_ID,ADDRESS,PHONE
FROM CUSTOMER C FULL JOIN ADDRESS A
ON C.ADDRESS_ID = A.ADDRESS_ID;

--LEFT JOIN WITH WHERE
SELECT *
FROM CUSTOMER C FULL JOIN ADDRESS A
ON A.ADDRESS_ID = C.ADDRESS_ID
WHERE A.ADDRESS_ID IS NULL OR c.ADDRESS_ID IS NULL ;

